// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package database

import (
	"context"
	"database/sql"
	"time"
)

const addProfileIDInUser = `-- name: AddProfileIDInUser :exec
UPDATE users
SET profile_id = $1
`

func (q *Queries) AddProfileIDInUser(ctx context.Context, profileID sql.NullInt32) error {
	_, err := q.db.ExecContext(ctx, addProfileIDInUser, profileID)
	return err
}

const createApplicantProfile = `-- name: CreateApplicantProfile :one
INSERT INTO profile (applicant)
VALUES ($1)
RETURNING applicant
`

func (q *Queries) CreateApplicantProfile(ctx context.Context, applicant int32) (int32, error) {
	row := q.db.QueryRowContext(ctx, createApplicantProfile, applicant)
	err := row.Scan(&applicant)
	return applicant, err
}

const createJob = `-- name: CreateJob :one
INSERT INTO job (title, description, posted_on, company_name, posted_by)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, title, description, posted_on, company_name, posted_by
`

type CreateJobParams struct {
	Title       string
	Description string
	PostedOn    time.Time
	CompanyName string
	PostedBy    int32
}

type CreateJobRow struct {
	ID          int32
	Title       string
	Description string
	PostedOn    time.Time
	CompanyName string
	PostedBy    int32
}

func (q *Queries) CreateJob(ctx context.Context, arg CreateJobParams) (CreateJobRow, error) {
	row := q.db.QueryRowContext(ctx, createJob,
		arg.Title,
		arg.Description,
		arg.PostedOn,
		arg.CompanyName,
		arg.PostedBy,
	)
	var i CreateJobRow
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.PostedOn,
		&i.CompanyName,
		&i.PostedBy,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (name, email, address, user_type, password_hash, profile_headline)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, name, email, user_type
`

type CreateUserParams struct {
	Name            string
	Email           string
	Address         string
	UserType        UserType
	PasswordHash    string
	ProfileHeadline string
}

type CreateUserRow struct {
	ID       int32
	Name     string
	Email    string
	UserType UserType
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Name,
		arg.Email,
		arg.Address,
		arg.UserType,
		arg.PasswordHash,
		arg.ProfileHeadline,
	)
	var i CreateUserRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.UserType,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, password_hash, user_type FROM users
WHERE email = $1
`

type GetUserRow struct {
	ID           int32
	PasswordHash string
	UserType     UserType
}

func (q *Queries) GetUser(ctx context.Context, email string) (GetUserRow, error) {
	row := q.db.QueryRowContext(ctx, getUser, email)
	var i GetUserRow
	err := row.Scan(&i.ID, &i.PasswordHash, &i.UserType)
	return i, err
}

const getUserFromID = `-- name: GetUserFromID :one
SELECT user_type FROM users
WHERE id = $1
`

func (q *Queries) GetUserFromID(ctx context.Context, id int32) (UserType, error) {
	row := q.db.QueryRowContext(ctx, getUserFromID, id)
	var user_type UserType
	err := row.Scan(&user_type)
	return user_type, err
}

const updateProfile = `-- name: UpdateProfile :one
UPDATE profile
SET name = $1, email = $2, phone=$3, skills = $4, education = $5
WHERE applicant = $6
RETURNING name, email, phone, skills, education
`

type UpdateProfileParams struct {
	Name      sql.NullString
	Email     sql.NullString
	Phone     sql.NullString
	Skills    sql.NullString
	Education sql.NullString
	Applicant int32
}

type UpdateProfileRow struct {
	Name      sql.NullString
	Email     sql.NullString
	Phone     sql.NullString
	Skills    sql.NullString
	Education sql.NullString
}

func (q *Queries) UpdateProfile(ctx context.Context, arg UpdateProfileParams) (UpdateProfileRow, error) {
	row := q.db.QueryRowContext(ctx, updateProfile,
		arg.Name,
		arg.Email,
		arg.Phone,
		arg.Skills,
		arg.Education,
		arg.Applicant,
	)
	var i UpdateProfileRow
	err := row.Scan(
		&i.Name,
		&i.Email,
		&i.Phone,
		&i.Skills,
		&i.Education,
	)
	return i, err
}
