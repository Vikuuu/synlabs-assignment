// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package database

import (
	"context"
	"database/sql"
)

const addProfileIDInUser = `-- name: AddProfileIDInUser :exec
UPDATE users
SET profile_id = $1
`

func (q *Queries) AddProfileIDInUser(ctx context.Context, profileID sql.NullInt32) error {
	_, err := q.db.ExecContext(ctx, addProfileIDInUser, profileID)
	return err
}

const createApplicantProfile = `-- name: CreateApplicantProfile :one
INSERT INTO profile (applicant)
VALUES ($1)
RETURNING applicant
`

func (q *Queries) CreateApplicantProfile(ctx context.Context, applicant int32) (int32, error) {
	row := q.db.QueryRowContext(ctx, createApplicantProfile, applicant)
	err := row.Scan(&applicant)
	return applicant, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (name, email, address, user_type, password_hash, profile_headline)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, name, email, user_type
`

type CreateUserParams struct {
	Name            string
	Email           string
	Address         string
	UserType        UserType
	PasswordHash    string
	ProfileHeadline string
}

type CreateUserRow struct {
	ID       int32
	Name     string
	Email    string
	UserType UserType
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Name,
		arg.Email,
		arg.Address,
		arg.UserType,
		arg.PasswordHash,
		arg.ProfileHeadline,
	)
	var i CreateUserRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.UserType,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, password_hash, user_type FROM users
WHERE email = $1
`

type GetUserRow struct {
	ID           int32
	PasswordHash string
	UserType     UserType
}

func (q *Queries) GetUser(ctx context.Context, email string) (GetUserRow, error) {
	row := q.db.QueryRowContext(ctx, getUser, email)
	var i GetUserRow
	err := row.Scan(&i.ID, &i.PasswordHash, &i.UserType)
	return i, err
}
