// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package database

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"
)

type UserType string

const (
	UserTypeApplicant UserType = "applicant"
	UserTypeAdmin     UserType = "admin"
)

func (e *UserType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserType(s)
	case string:
		*e = UserType(s)
	default:
		return fmt.Errorf("unsupported scan type for UserType: %T", src)
	}
	return nil
}

type NullUserType struct {
	UserType UserType
	Valid    bool // Valid is true if UserType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserType) Scan(value interface{}) error {
	if value == nil {
		ns.UserType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UserType), nil
}

type Job struct {
	ID                int32
	Title             string
	Description       string
	PostedOn          time.Time
	TotalApplications sql.NullInt32
	CompanyName       string
	PostedBy          int32
}

type Profile struct {
	Applicant         int32
	ResumeFileAddress string
	Skills            sql.NullString
	Education         sql.NullString
	Name              sql.NullString
	Email             sql.NullString
	Phone             sql.NullString
}

type User struct {
	ID              int32
	Name            string
	Email           string
	Address         string
	UserType        UserType
	PasswordHash    string
	ProfileHeadline string
	ProfileID       sql.NullInt32
}
